#pragma once

#include "object.h"

typedef struct world
{
    world *right;
    world *left;
    world *up;
    world *down;

    object *objs;
} world;

/*

                      Y- or UP

        X- or LEFT    MAP'S CENTER    X+ or RIGHT

                      Y+ or DOWN

    Navigate by X first, then Y

 */

void World_Add(world **head, int x, int y)
{
    if (World_Get(*head, x, y) != NULL)
        return; // Just in case that tile already exists

    world *newNode = new world;
    world *last = *head;

    newNode->up = NULL;
    newNode->down = NULL;
    newNode->right = NULL;
    newNode->left = NULL;

    newNode->objs = NULL;

    if (*head == NULL)
    {
        *head = newNode;
        return;
    }

    // Link the new tile to our world
    if (x > 0)
    {
        for (int i = 0; i < x; i++)
        {
            if (last->right == NULL)
                break;
            last = last->right;
        }
    }
    else if (x < 0)
    {
        for (int i = 0; i > x; i--)
        {
            if (last->left == NULL)
                break;
            last = last->left;
        }
    }

    if (y > 0)
    {
        for (int i = 0; i < y; i++)
        {
            if (last->down == NULL)
                break;
            last = last->down;
        }
    }
    else if (y < 0)
    {
        for (int i = 0; i > y; i--)
        {
            if (last->up == NULL)
                break;
            last = last->up;
        }
    }

    return;
}

void World_Delete(world **head, int x, int y)
{
    return;
}

world *World_Get(world *node, int x, int y)
{
    world *last = node;
    if (last == NULL)
        return NULL;
    if (x > 0)
    {
        for (int i = 0; i < x; i++)
        {
            if (last->right != NULL)
                last = last->right;
        }
    }
    else if (x < 0)
    {
        for (int i = 0; i > x; i--)
        {
            if (last->left != NULL)
                last = last->left;
        }
    }

    if (y > 0)
    {
        for (int i = 0; i < y; i++)
        {
            if (last->up != NULL)
                last = last->up;
        }
    }
    else if (y < 0)
    {
        for (int i = 0; i > y; i--)
        {
            if (last->down != NULL)
                last = last->down;
        }
    }

    return last;

    return node;
}